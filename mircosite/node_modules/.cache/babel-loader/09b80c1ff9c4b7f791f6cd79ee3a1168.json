{"remainingRequest":"/Users/lulutanenbaum/Desktop/your-brain-on-politics/node_modules/babel-loader/lib/index.js!/Users/lulutanenbaum/Desktop/your-brain-on-politics/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/lulutanenbaum/Desktop/your-brain-on-politics/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lulutanenbaum/Desktop/your-brain-on-politics/src/components/BarChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/lulutanenbaum/Desktop/your-brain-on-politics/src/components/BarChart.vue","mtime":1588276116968},{"path":"/Users/lulutanenbaum/Desktop/your-brain-on-politics/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lulutanenbaum/Desktop/your-brain-on-politics/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/lulutanenbaum/Desktop/your-brain-on-politics/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lulutanenbaum/Desktop/your-brain-on-politics/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcCI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCB7IHNlbGVjdCwgc2NhbGVMaW5lYXIsIGF4aXNCb3R0b20sIGF4aXNMZWZ0LCBzY2FsZUJhbmQsIGZvcm1hdCB9IGZyb20gJ2QzJzsKaW1wb3J0IF8gZnJvbSAnbG9kYXNoJzsKZXhwb3J0IGRlZmF1bHQgewogIHByb3BzOiBbJ2lzc3VlcyddLAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBjaGFydDogbnVsbCwKICAgICAgc2VsZWN0ZWRJc3N1ZTogbnVsbAogICAgfTsKICB9LAogIGNvbXB1dGVkOiB7CiAgICBmb3JtYXR0ZWRQZXJjZW50YWdlOiBmdW5jdGlvbiBmb3JtYXR0ZWRQZXJjZW50YWdlKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgaWYgKF8uaXNOaWwodGhpcy5zZWxlY3RlZElzc3VlKSkgewogICAgICAgIHJldHVybiAnJzsKICAgICAgfQoKICAgICAgdmFyIGlzc3VlT2JqID0gXy5maW5kKHRoaXMuaXNzdWVzLCBmdW5jdGlvbiAoaSkgewogICAgICAgIHJldHVybiBpLmlzc3VlID09PSBfdGhpcy5zZWxlY3RlZElzc3VlOwogICAgICB9KTsKCiAgICAgIHJldHVybiBmb3JtYXQoJy4wJScpKGlzc3VlT2JqLnBlcmNlbnRhZ2UpOwogICAgfQogIH0sCiAgd2F0Y2g6IHsKICAgIGlzc3VlczogZnVuY3Rpb24gaXNzdWVzKHZhbCkgewogICAgICBpZiAodGhpcy5jaGFydCAhPT0gbnVsbCkgdGhpcy5jaGFydC5yZW1vdmUoKTsKICAgICAgdGhpcy5yZW5kZXJDaGFydCh2YWwsIHRoaXMuc2VsZWN0ZWRJc3N1ZSk7CiAgICAgIHRoaXMuc2VsZWN0ZWRJc3N1ZSA9IF8uZmlyc3QodmFsKS5pc3N1ZTsKICAgIH0sCiAgICBzZWxlY3RlZElzc3VlOiBmdW5jdGlvbiBzZWxlY3RlZElzc3VlKHZhbCkgewogICAgICBpZiAodGhpcy5jaGFydCAhPT0gbnVsbCkgdGhpcy5jaGFydC5yZW1vdmUoKTsKICAgICAgdGhpcy5yZW5kZXJDaGFydCh0aGlzLmlzc3VlcywgdmFsKTsKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIHJlbmRlckNoYXJ0OiBmdW5jdGlvbiByZW5kZXJDaGFydChpc3N1ZXNWYWwsIHNlbGVjdGVkSXNzdWUpIHsKICAgICAgdmFyIGNvbnRhaW5lciA9IHNlbGVjdCgnI3N2Zy1jb250YWluZXInKS5ub2RlKCk7CiAgICAgIHZhciBtYXJnaW4gPSA2MDsKICAgICAgdmFyIHN2Z1dpZHRoID0gY29udGFpbmVyLmNsaWVudFdpZHRoOwogICAgICB2YXIgc3ZnSGVpZ2h0ID0gc3ZnV2lkdGggKiAwLjY7CiAgICAgIHZhciBjaGFydFdpZHRoID0gc3ZnV2lkdGggLSAyICogbWFyZ2luOwogICAgICB2YXIgY2hhcnRIZWlnaHQgPSBzdmdIZWlnaHQgLSAyICogbWFyZ2luOwogICAgICB2YXIgc3ZnID0gc2VsZWN0KCdzdmcnKS5hdHRyKCd3aWR0aCcsIHN2Z1dpZHRoKS5hdHRyKCdoZWlnaHQnLCBzdmdIZWlnaHQpOwogICAgICB0aGlzLmNoYXJ0ID0gc3ZnLmFwcGVuZCgnZycpLmF0dHIoJ3RyYW5zZm9ybScsICJ0cmFuc2xhdGUoIi5jb25jYXQobWFyZ2luLCAiLCIpLmNvbmNhdChtYXJnaW4sICIpIikpOwogICAgICB2YXIgeVNjYWxlID0gc2NhbGVMaW5lYXIoKS5yYW5nZShbY2hhcnRIZWlnaHQsIDBdKS5kb21haW4oWzAsIF8ubWF4QnkoaXNzdWVzVmFsLCAncGVyY2VudGFnZScpLnBlcmNlbnRhZ2VdKTsKICAgICAgdGhpcy5jaGFydC5hcHBlbmQoJ2cnKS5jYWxsKGF4aXNMZWZ0KHlTY2FsZSkudGlja3MoMCkpOwogICAgICB2YXIgeFNjYWxlID0gc2NhbGVCYW5kKCkucmFuZ2UoWzAsIGNoYXJ0V2lkdGhdKS5kb21haW4oaXNzdWVzVmFsLm1hcChmdW5jdGlvbiAocykgewogICAgICAgIHJldHVybiBzLmlzc3VlOwogICAgICB9KSkucGFkZGluZygwLjIpOwogICAgICB0aGlzLmNoYXJ0LmFwcGVuZCgnZycpLmF0dHIoJ3RyYW5zZm9ybScsICJ0cmFuc2xhdGUoMCwgIi5jb25jYXQoY2hhcnRIZWlnaHQsICIpIikpLmNhbGwoYXhpc0JvdHRvbSh4U2NhbGUpLnRpY2tzKDApLnRpY2tWYWx1ZXMoW10pKTsKICAgICAgdmFyIGJhckdyb3VwcyA9IHRoaXMuY2hhcnQuc2VsZWN0QWxsKCdyZWN0JykuZGF0YShpc3N1ZXNWYWwpLmVudGVyKCk7CiAgICAgIGJhckdyb3Vwcy5hcHBlbmQoJ3JlY3QnKS5hdHRyKCdjbGFzcycsICdiYXInKS5hdHRyKCd4JywgZnVuY3Rpb24gKGcpIHsKICAgICAgICByZXR1cm4geFNjYWxlKGcuaXNzdWUpOwogICAgICB9KS5hdHRyKCd5JywgZnVuY3Rpb24gKGcpIHsKICAgICAgICByZXR1cm4geVNjYWxlKGcucGVyY2VudGFnZSk7CiAgICAgIH0pLmF0dHIoJ2hlaWdodCcsIGZ1bmN0aW9uIChnKSB7CiAgICAgICAgcmV0dXJuIGNoYXJ0SGVpZ2h0IC0geVNjYWxlKGcucGVyY2VudGFnZSk7CiAgICAgIH0pLmF0dHIoJ3dpZHRoJywgeFNjYWxlLmJhbmR3aWR0aCgpKS5jbGFzc2VkKCdzZWxlY3RlZCcsIGZ1bmN0aW9uIChkKSB7CiAgICAgICAgcmV0dXJuIF8uaXNFcXVhbChkLmlzc3VlLCBzZWxlY3RlZElzc3VlKTsKICAgICAgfSk7CiAgICB9CiAgfQp9Ow=="},{"version":3,"sources":["BarChart.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div id=\"flex-container\">\n    <div>\n      <h2>People state...</h2>\n      <p>The following bar chart is reflective of the consciously stated survey data. Participants were asked ‘What do you think are the most important issues this election?’ and were not limited to one selection. The results of the question highlight five key issues that are important to a minimum of 50% of the sample: healthcare, climate change, the economy, education and immigration.</p>\n    </div>\n    <div id=\"svg-container\">\n      <p id=\"percentage\">{{ formattedPercentage }} state that they care about</p>\n      <select v-model=\"selectedIssue\">\n        <option v-for=\"issue in issues\" v-bind:key=\"issue.issue\">{{ issue.issue }}</option>\n      </select>\n      <svg />\n    </div>\n  </div>\n</template>\n\n<script>\nimport {\n  select,\n  scaleLinear,\n  axisBottom,\n  axisLeft,\n  scaleBand,\n  format,\n} from 'd3'\nimport _ from 'lodash'\nexport default {\n  props: ['issues'],\n  data() {\n    return {\n      chart: null,\n      selectedIssue: null,\n    }\n  },\n  computed: {\n    formattedPercentage: function() {\n      if (_.isNil(this.selectedIssue)) {\n        return ''\n      }\n      const issueObj = _.find(this.issues, i => i.issue === this.selectedIssue)\n      return format('.0%')(issueObj.percentage)\n    },\n  },\n  watch: {\n    issues(val) {\n      if (this.chart !== null) this.chart.remove()\n      this.renderChart(val, this.selectedIssue)\n      this.selectedIssue = _.first(val).issue\n    },\n    selectedIssue(val) {\n      if (this.chart !== null) this.chart.remove()\n      this.renderChart(this.issues, val)\n    },\n  },\n  methods: {\n    renderChart(issuesVal, selectedIssue) {\n      const container = select('#svg-container').node()\n      const margin = 60\n      const svgWidth = container.clientWidth\n\n      const svgHeight = svgWidth * 0.6\n      const chartWidth = svgWidth - 2 * margin\n      const chartHeight = svgHeight - 2 * margin\n\n      const svg = select('svg')\n        .attr('width', svgWidth)\n        .attr('height', svgHeight)\n\n      this.chart = svg\n        .append('g')\n        .attr('transform', `translate(${margin},${margin})`)\n\n      const yScale = scaleLinear()\n        .range([chartHeight, 0])\n        .domain([0, _.maxBy(issuesVal, 'percentage').percentage])\n\n      this.chart.append('g').call(axisLeft(yScale).ticks(0))\n\n      const xScale = scaleBand()\n        .range([0, chartWidth])\n        .domain(issuesVal.map(s => s.issue))\n        .padding(0.2)\n\n      this.chart\n        .append('g')\n        .attr('transform', `translate(0, ${chartHeight})`)\n        .call(\n          axisBottom(xScale)\n            .ticks(0)\n            .tickValues([])\n        )\n\n      const barGroups = this.chart\n        .selectAll('rect')\n        .data(issuesVal)\n        .enter()\n\n      barGroups\n        .append('rect')\n        .attr('class', 'bar')\n        .attr('x', g => xScale(g.issue))\n        .attr('y', g => yScale(g.percentage))\n        .attr('height', g => chartHeight - yScale(g.percentage))\n        .attr('width', xScale.bandwidth())\n        .classed('selected', d => {\n          return _.isEqual(d.issue, selectedIssue)\n        })\n    },\n  },\n}\n</script>\n<style>\n#flex-container {\n  padding-top: 150px;\n  padding-bottom: 200px; \n  padding-left: 63px;\n  display: flex;\n  text-align: left;\n}\n\n#flex-container > div {\n  flex: 50%;\n}\n#flex-container h2 {\n  margin-bottom: 40px;\n  font-weight: 700; \n}\n#flex-container p {\n  line-height: 125%;\n  width: 65%;\n}\n#flex-container #percentage {\n  display: inline;\n  margin-right: 2px;\n  font-size: 1.2rem;\n  font-weight: 700;\n}\n\n#flex-container select {\n  background-color: transparent;\n  border: none;\n  outline: none;\n  color: #da3767;\n  border-bottom: 1px white solid;\n  font-size: 1.2rem;\n  font-weight: 700;\n  border-radius: 0;\n}\nselect::-ms-expand {\n  display: none;\n}\n\n.bar {\n  fill: #ffffff;\n}\n\n.bar.selected {\n  fill: #da3767;\n}\n</style>\n"],"sourceRoot":"src/components"}]}