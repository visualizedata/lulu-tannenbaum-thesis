{"remainingRequest":"/Users/lulutanenbaum/Desktop/your-brain-on-politics/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lulutanenbaum/Desktop/your-brain-on-politics/src/components/BarChart.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/lulutanenbaum/Desktop/your-brain-on-politics/src/components/BarChart.vue","mtime":1588276116968},{"path":"/Users/lulutanenbaum/Desktop/your-brain-on-politics/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lulutanenbaum/Desktop/your-brain-on-politics/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/lulutanenbaum/Desktop/your-brain-on-politics/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/lulutanenbaum/Desktop/your-brain-on-politics/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lulutanenbaum/Desktop/your-brain-on-politics/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCiNmbGV4LWNvbnRhaW5lciB7CiAgcGFkZGluZy10b3A6IDE1MHB4OwogIHBhZGRpbmctYm90dG9tOiAyMDBweDsgCiAgcGFkZGluZy1sZWZ0OiA2M3B4OwogIGRpc3BsYXk6IGZsZXg7CiAgdGV4dC1hbGlnbjogbGVmdDsKfQoKI2ZsZXgtY29udGFpbmVyID4gZGl2IHsKICBmbGV4OiA1MCU7Cn0KI2ZsZXgtY29udGFpbmVyIGgyIHsKICBtYXJnaW4tYm90dG9tOiA0MHB4OwogIGZvbnQtd2VpZ2h0OiA3MDA7IAp9CiNmbGV4LWNvbnRhaW5lciBwIHsKICBsaW5lLWhlaWdodDogMTI1JTsKICB3aWR0aDogNjUlOwp9CiNmbGV4LWNvbnRhaW5lciAjcGVyY2VudGFnZSB7CiAgZGlzcGxheTogaW5saW5lOwogIG1hcmdpbi1yaWdodDogMnB4OwogIGZvbnQtc2l6ZTogMS4ycmVtOwogIGZvbnQtd2VpZ2h0OiA3MDA7Cn0KCiNmbGV4LWNvbnRhaW5lciBzZWxlY3QgewogIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OwogIGJvcmRlcjogbm9uZTsKICBvdXRsaW5lOiBub25lOwogIGNvbG9yOiAjZGEzNzY3OwogIGJvcmRlci1ib3R0b206IDFweCB3aGl0ZSBzb2xpZDsKICBmb250LXNpemU6IDEuMnJlbTsKICBmb250LXdlaWdodDogNzAwOwogIGJvcmRlci1yYWRpdXM6IDA7Cn0Kc2VsZWN0OjotbXMtZXhwYW5kIHsKICBkaXNwbGF5OiBub25lOwp9CgouYmFyIHsKICBmaWxsOiAjZmZmZmZmOwp9CgouYmFyLnNlbGVjdGVkIHsKICBmaWxsOiAjZGEzNzY3Owp9Cg=="},{"version":3,"sources":["BarChart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgHA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"BarChart.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div id=\"flex-container\">\n    <div>\n      <h2>People state...</h2>\n      <p>The following bar chart is reflective of the consciously stated survey data. Participants were asked ‘What do you think are the most important issues this election?’ and were not limited to one selection. The results of the question highlight five key issues that are important to a minimum of 50% of the sample: healthcare, climate change, the economy, education and immigration.</p>\n    </div>\n    <div id=\"svg-container\">\n      <p id=\"percentage\">{{ formattedPercentage }} state that they care about</p>\n      <select v-model=\"selectedIssue\">\n        <option v-for=\"issue in issues\" v-bind:key=\"issue.issue\">{{ issue.issue }}</option>\n      </select>\n      <svg />\n    </div>\n  </div>\n</template>\n\n<script>\nimport {\n  select,\n  scaleLinear,\n  axisBottom,\n  axisLeft,\n  scaleBand,\n  format,\n} from 'd3'\nimport _ from 'lodash'\nexport default {\n  props: ['issues'],\n  data() {\n    return {\n      chart: null,\n      selectedIssue: null,\n    }\n  },\n  computed: {\n    formattedPercentage: function() {\n      if (_.isNil(this.selectedIssue)) {\n        return ''\n      }\n      const issueObj = _.find(this.issues, i => i.issue === this.selectedIssue)\n      return format('.0%')(issueObj.percentage)\n    },\n  },\n  watch: {\n    issues(val) {\n      if (this.chart !== null) this.chart.remove()\n      this.renderChart(val, this.selectedIssue)\n      this.selectedIssue = _.first(val).issue\n    },\n    selectedIssue(val) {\n      if (this.chart !== null) this.chart.remove()\n      this.renderChart(this.issues, val)\n    },\n  },\n  methods: {\n    renderChart(issuesVal, selectedIssue) {\n      const container = select('#svg-container').node()\n      const margin = 60\n      const svgWidth = container.clientWidth\n\n      const svgHeight = svgWidth * 0.6\n      const chartWidth = svgWidth - 2 * margin\n      const chartHeight = svgHeight - 2 * margin\n\n      const svg = select('svg')\n        .attr('width', svgWidth)\n        .attr('height', svgHeight)\n\n      this.chart = svg\n        .append('g')\n        .attr('transform', `translate(${margin},${margin})`)\n\n      const yScale = scaleLinear()\n        .range([chartHeight, 0])\n        .domain([0, _.maxBy(issuesVal, 'percentage').percentage])\n\n      this.chart.append('g').call(axisLeft(yScale).ticks(0))\n\n      const xScale = scaleBand()\n        .range([0, chartWidth])\n        .domain(issuesVal.map(s => s.issue))\n        .padding(0.2)\n\n      this.chart\n        .append('g')\n        .attr('transform', `translate(0, ${chartHeight})`)\n        .call(\n          axisBottom(xScale)\n            .ticks(0)\n            .tickValues([])\n        )\n\n      const barGroups = this.chart\n        .selectAll('rect')\n        .data(issuesVal)\n        .enter()\n\n      barGroups\n        .append('rect')\n        .attr('class', 'bar')\n        .attr('x', g => xScale(g.issue))\n        .attr('y', g => yScale(g.percentage))\n        .attr('height', g => chartHeight - yScale(g.percentage))\n        .attr('width', xScale.bandwidth())\n        .classed('selected', d => {\n          return _.isEqual(d.issue, selectedIssue)\n        })\n    },\n  },\n}\n</script>\n<style>\n#flex-container {\n  padding-top: 150px;\n  padding-bottom: 200px; \n  padding-left: 63px;\n  display: flex;\n  text-align: left;\n}\n\n#flex-container > div {\n  flex: 50%;\n}\n#flex-container h2 {\n  margin-bottom: 40px;\n  font-weight: 700; \n}\n#flex-container p {\n  line-height: 125%;\n  width: 65%;\n}\n#flex-container #percentage {\n  display: inline;\n  margin-right: 2px;\n  font-size: 1.2rem;\n  font-weight: 700;\n}\n\n#flex-container select {\n  background-color: transparent;\n  border: none;\n  outline: none;\n  color: #da3767;\n  border-bottom: 1px white solid;\n  font-size: 1.2rem;\n  font-weight: 700;\n  border-radius: 0;\n}\nselect::-ms-expand {\n  display: none;\n}\n\n.bar {\n  fill: #ffffff;\n}\n\n.bar.selected {\n  fill: #da3767;\n}\n</style>\n"]}]}