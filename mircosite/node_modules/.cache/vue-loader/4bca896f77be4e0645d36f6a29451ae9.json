{"remainingRequest":"/Users/lulutanenbaum/Desktop/your-brain-on-politics/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lulutanenbaum/Desktop/your-brain-on-politics/src/components/AnimatedLineChart.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/lulutanenbaum/Desktop/your-brain-on-politics/src/components/AnimatedLineChart.vue","mtime":1588111977997},{"path":"/Users/lulutanenbaum/Desktop/your-brain-on-politics/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lulutanenbaum/Desktop/your-brain-on-politics/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/lulutanenbaum/Desktop/your-brain-on-politics/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/lulutanenbaum/Desktop/your-brain-on-politics/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lulutanenbaum/Desktop/your-brain-on-politics/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5saW5lY2hhcnQtc3ZnLWNvbnRhaW5lciBoNSB7CiAgbWFyZ2luLXRvcDogNTBweDsKfQoubGluZWNoYXJ0LXN2Zy1jb250YWluZXIgc3Bhbi5tZXRhZGF0YSB7CiAgY29sb3I6ICNhNDRiNmQ7CiAgZm9udC1zaXplOiAxLjJyZW07CiAgZm9udC13ZWlnaHQ6IDYwMDsKICBtYXJnaW46IDBweCAxLjVyZW07Cn0KCi5saW5lY2hhcnQtc3ZnLWNvbnRhaW5lciAuYXhpcyBwYXRoIHsKICBzdHJva2U6ICNlOGViZWY7Cn0KCi5saW5lY2hhcnQtc3ZnLWNvbnRhaW5lciAuYXhpcyAudGljayBsaW5lIHsKICBzdHJva2U6ICNlOGViZWY7Cn0KLmxpbmVjaGFydC1zdmctY29udGFpbmVyIC5heGlzIHRleHQgewogIGZvbnQtc2l6ZTogMC41cmVtOwogIGZpbGw6ICM1ZDY5N2I7CiAgc3Ryb2tlOiBub25lOwp9CgpwYXRoLmJlbmNobWFyay1saW5lIHsKICBzdHJva2U6ICMzYTM3Mzc7CiAgc3Ryb2tlLWRhc2hhcnJheTogMyAxOwogIHN0cm9rZS13aWR0aDogMC43NTsKICBmaWxsOiBub25lOwp9CgoubGluZWNoYXJ0LXN2Zy1jb250YWluZXIgLmxpbmUgewogIHN0cm9rZTogI2E0NGI2ZDsKICBmaWxsOiBub25lOwogIHN0cm9rZS13aWR0aDogMzsKfQoKLmxpbmVjaGFydC1zdmctY29udGFpbmVyIHNwYW4ubGVnZW5kIHsKICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgbWFyZ2luLWxlZnQ6IDc1cHg7CiAgZm9udC1zaXplOiAwLjVyZW07CiAgY29sb3I6ICM1ZDY5N2I7Cn0KLmxpbmVjaGFydC1zdmctY29udGFpbmVyIHNwYW4ubGVnZW5kOm50aC1vZi10eXBlKDEpIHsKICBtYXJnaW4tbGVmdDogMjAwcHg7Cn0KCi5saW5lY2hhcnQtc3ZnLWNvbnRhaW5lciBzcGFuLmxlZ2VuZDpiZWZvcmUgewogIGNvbnRlbnQ6ICcnOwogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICBib3R0b206IDVweDsKICBsZWZ0OiAtNTBweDsKICB3aWR0aDogNDBweDsKfQoubGluZWNoYXJ0LXN2Zy1jb250YWluZXIgc3Bhbi5sZWdlbmQ6bnRoLW9mLXR5cGUoMSk6YmVmb3JlIHsKICBib3JkZXItYm90dG9tOiAxcHggZGFzaGVkICMzYTM3Mzc7Cn0KLmxpbmVjaGFydC1zdmctY29udGFpbmVyIHNwYW4ubGVnZW5kOm50aC1vZi10eXBlKDIpOmJlZm9yZSB7CiAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkICNhNDRiNmQ7Cn0KCg=="},{"version":3,"sources":["AnimatedLineChart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"AnimatedLineChart.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div :id=\"id\" class=\"linechart-svg-container\">\n    <svg />\n    <span class=\"legend\">Benchmark</span>\n    <span class=\"legend\">Neural Engagement</span>\n    <h5>Top Neural Engagement Scores</h5>\n    <p>\n      Current Second\n      <span class=\"time metadata\">0%</span>\n    </p>\n    <p>\n      Average Engagement\n      <span class=\"avg metadata\">+17%</span>Max Engagement\n      <span class=\"max metadata\">+54%</span>\n    </p>\n  </div>\n</template>\n\n<script>\nimport {\n  select,\n  scaleLinear,\n  line,\n  axisBottom,\n  axisLeft,\n  format,\n  extent,\n  timeFormat,\n  event,\n} from 'd3'\nimport _ from 'lodash'\nexport default {\n  props: ['brainData', 'reportXScale', 'updateVideoTime', 'id'],\n  mounted() {\n    this.renderChart(this.brainData)\n  },\n  computed: {\n    formattedPercentage: function() {\n      if (_.isNil(this.selectedIssue)) {\n        return ''\n      }\n      const issueObj = _.find(this.issues, i => i.issue === this.selectedIssue)\n      return format('.0%')(issueObj.percentage)\n    },\n  },\n  methods: {\n    renderChart(brainData) {\n      select(`[id=\"${this.id}\"].linechart-svg-container svg`)\n        .selectAll('*')\n        .remove()\n      const container = select(\n        `[id=\"${this.id}\"].linechart-svg-container`\n      ).node()\n      const margin = 30\n      const svgWidth = container.clientWidth\n\n      const svgHeight = svgWidth * 0.6\n      const chartWidth = svgWidth - 2 * margin\n      const chartHeight = svgHeight - 2 * margin\n\n      const svg = select(`[id=\"${this.id}\"] svg`)\n        .attr('width', svgWidth)\n        .attr('height', svgHeight)\n\n      const chart = svg\n        .append('g')\n        .attr('transform', `translate(${margin},${margin})`)\n\n      const yScale = scaleLinear()\n        .range([chartHeight, 0])\n        .domain([-60, 90])\n      // .domain([\n      //   _.minBy(this.content, 'NES')['NES'],\n      //   _.maxBy(this.content, 'NES')['NES'],\n      // ])\n\n      chart.append('g').call(axisLeft(yScale).ticks(0))\n\n      const xScale = scaleLinear()\n        .range([0, chartWidth])\n        .domain(extent(brainData.map(d => d.offset)))\n\n      chart\n        .append('g')\n        .attr('transform', `translate(0, ${chartHeight})`)\n        .attr('class', 'axis')\n        .call(\n          axisBottom(xScale).tickFormat(d =>\n            timeFormat('%M:%S')(new Date(0).setSeconds(d))\n          )\n        )\n        .selectAll('text')\n        .attr('transform', 'rotate(-45)')\n        .style('text-anchor', 'end')\n\n      chart\n        .append('g')\n        .attr('transform', `translate(0, 0)`)\n        .attr('class', 'axis')\n        .call(\n          axisLeft(yScale)\n            .tickValues([-60, -30, 0, 30, 60, 90])\n            .tickFormat(d => `${d}%`)\n        )\n\n      chart\n        .append('path')\n        .datum(brainData)\n        .attr('class', 'line')\n        .attr(\n          'd',\n          line()\n            .x(d => xScale(d.offset))\n            .y(d => yScale(d.NES))\n        )\n\n      const progressOverlay = chart\n        .append('rect')\n        .attr('transform', 'translate(1, 0)')\n        .attr('width', chartWidth)\n        .attr('height', chartHeight)\n        .attr('fill', 'white')\n\n      // benchmark\n      chart\n        .append('path')\n        .datum(brainData)\n        .attr('class', 'benchmark-line')\n        .attr(\n          'd',\n          line()\n            .x(d => xScale(d.offset))\n            .y(yScale(0))\n        )\n\n      svg.on('click', () => {\n        const xOffset = event.offsetX - margin\n        const newTime = xScale.invert(xOffset)\n        this.updateVideoTime(this.id, newTime)\n      })\n\n      const first = _.head(brainData)\n      const pFormat = format('+.0%')\n      select(container)\n        .select('.avg')\n        .html(pFormat(_.get(first, 'average')))\n      select(container)\n        .select('.max')\n        .html(pFormat(_.get(first, 'max')))\n\n      this.reportXScale(this.id, brainData, xScale, progressOverlay)\n    },\n  },\n}\n</script>\n<style>\n\n.linechart-svg-container h5 {\n  margin-top: 50px;\n}\n.linechart-svg-container span.metadata {\n  color: #a44b6d;\n  font-size: 1.2rem;\n  font-weight: 600;\n  margin: 0px 1.5rem;\n}\n\n.linechart-svg-container .axis path {\n  stroke: #e8ebef;\n}\n\n.linechart-svg-container .axis .tick line {\n  stroke: #e8ebef;\n}\n.linechart-svg-container .axis text {\n  font-size: 0.5rem;\n  fill: #5d697b;\n  stroke: none;\n}\n\npath.benchmark-line {\n  stroke: #3a3737;\n  stroke-dasharray: 3 1;\n  stroke-width: 0.75;\n  fill: none;\n}\n\n.linechart-svg-container .line {\n  stroke: #a44b6d;\n  fill: none;\n  stroke-width: 3;\n}\n\n.linechart-svg-container span.legend {\n  position: relative;\n  margin-left: 75px;\n  font-size: 0.5rem;\n  color: #5d697b;\n}\n.linechart-svg-container span.legend:nth-of-type(1) {\n  margin-left: 200px;\n}\n\n.linechart-svg-container span.legend:before {\n  content: '';\n  position: absolute;\n  bottom: 5px;\n  left: -50px;\n  width: 40px;\n}\n.linechart-svg-container span.legend:nth-of-type(1):before {\n  border-bottom: 1px dashed #3a3737;\n}\n.linechart-svg-container span.legend:nth-of-type(2):before {\n  border-bottom: 2px solid #a44b6d;\n}\n\n</style>\n"]}]}